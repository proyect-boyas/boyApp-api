üìö Documentaci√≥n Completa - API de Usuarios
üåê Informaci√≥n General
Base URL: http://localhost:3000/api/auth
Autenticaci√≥n: Bearer Token (JWT)
Content-Type: application/json




üîì RUTAS P√öBLICAS (Sin autenticaci√≥n)
1. üìù POST /api/auth/register - Registrar usuario
Descripci√≥n: Registra un nuevo usuario en el sistema (rol por defecto: user)
Headers:


Plain Text








Content-Type: application/json


Body (JSON):


JSON








{
  "nombre": "Juan P√©rez",
  "email": "juan@ejemplo.com",
  "password": "password123",
  "confirmPassword": "password123"
}


Respuesta Exitosa (201):


JSON








{
  "message": "Usuario registrado exitosamente",
  "user": {
    "id": 1,
    "nombre": "Juan P√©rez",
    "email": "juan@ejemplo.com",
    "role": "user"
  },
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}


Errores (400):


JSON








{
  "errors": [
    {
      "msg": "El nombre es requerido",
      "param": "nombre",
      "location": "body"
    }
  ]
}





2. üîë POST /api/auth/login - Iniciar sesi√≥n
Descripci√≥n: Autentica un usuario y devuelve un token JWT
Headers:


Plain Text








Content-Type: application/json


Body (JSON):


JSON








{
  "email": "juan@ejemplo.com",
  "password": "password123"
}


Respuesta Exitosa (200):


JSON








{
  "message": "Login exitoso",
  "user": {
    "id": 1,
    "nombre": "Juan P√©rez",
    "email": "juan@ejemplo.com",
    "role": "user"
  },
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}


Errores (400):


JSON








{
  "error": "Credenciales inv√°lidas"
}





üîê RUTAS PROTEGIDAS (Requieren autenticaci√≥n)
3. üë§ GET /api/auth/profile - Obtener perfil
Descripci√≥n: Obtiene la informaci√≥n del usuario autenticado
Headers:


Plain Text








Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json


Body: Vac√≠o
Respuesta Exitosa (200):


JSON








{
  "user": {
    "id": 1,
    "nombre": "Juan P√©rez",
    "email": "juan@ejemplo.com",
    "role": "user"
  }
}


Errores (401):


JSON








{
  "error": "Token de acceso requerido"
}





4. ‚úèÔ∏è PUT /api/auth/profile - Actualizar perfil
Descripci√≥n: Actualiza la informaci√≥n del usuario autenticado
Headers:


Plain Text








Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json


Body (JSON):


JSON








{
  "nombre": "Juan Carlos P√©rez"
}


Respuesta Exitosa (200):


JSON








{
  "message": "Perfil actualizado exitosamente",
  "user": {
    "id": 1,
    "nombre": "Juan Carlos P√©rez",
    "email": "juan@ejemplo.com",
    "role": "user"
  }
}





üëë RUTAS DE ADMINISTRACI√ìN (Requieren rol admin)
5. üìã POST /api/auth/admin/users - Crear usuario (Admin)
Descripci√≥n: Crea un nuevo usuario (solo administradores)
Headers:


Plain Text








Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json


Body (JSON):


JSON








{
  "nombre": "Mar√≠a Admin",
  "email": "maria@ejemplo.com",
  "password": "admin123",
  "confirmPassword": "admin123",
  "role": "admin"
}


Respuesta Exitosa (201):


JSON








{
  "message": "Usuario creado exitosamente",
  "user": {
    "id": 2,
    "nombre": "Mar√≠a Admin",
    "email": "maria@ejemplo.com",
    "role": "admin"
  }
}


Errores (403):


JSON








{
  "error": "Se requiere rol de administrador"
}





6. üë• GET /api/auth/admin/users - Listar todos los usuarios
Descripci√≥n: Obtiene una lista de todos los usuarios (solo administradores)
Headers:


Plain Text








Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json


Body: Vac√≠o
Respuesta Exitosa (200):


JSON








{
  "users": [
    {
      "id": 1,
      "nombre": "Juan P√©rez",
      "email": "juan@ejemplo.com",
      "role": "user",
      "created_at": "2024-01-15T10:30:00.000Z",
      "updated_at": "2024-01-15T10:30:00.000Z"
    },
    {
      "id": 2,
      "nombre": "Mar√≠a Admin",
      "email": "maria@ejemplo.com",
      "role": "admin",
      "created_at": "2024-01-15T11:30:00.000Z",
      "updated_at": "2024-01-15T11:30:00.000Z"
    }
  ]
}





7. üîç GET /api/auth/admin/users/:id - Obtener usuario espec√≠fico
Descripci√≥n: Obtiene informaci√≥n de un usuario espec√≠fico (solo administradores)
URL: GET /api/auth/admin/users/1
Headers:


Plain Text








Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json


Body: Vac√≠o
Respuesta Exitosa (200):


JSON








{
  "user": {
    "id": 1,
    "nombre": "Juan P√©rez",
    "email": "juan@ejemplo.com",
    "role": "user",
    "created_at": "2024-01-15T10:30:00.000Z",
    "updated_at": "2024-01-15T10:30:00.000Z"
  }
}


Errores (404):


JSON








{
  "error": "Usuario no encontrado"
}





8. üõ†Ô∏è PUT /api/auth/admin/users/:id - Actualizar usuario
Descripci√≥n: Actualiza cualquier usuario (solo administradores)
URL: PUT /api/auth/admin/users/1
Headers:


Plain Text








Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json


Body (JSON):


JSON








{
  "nombre": "Juan Carlos P√©rez Actualizado",
  "email": "juan.actualizado@ejemplo.com",
  "role": "admin"
}


Respuesta Exitosa (200):


JSON








{
  "message": "Usuario actualizado exitosamente",
  "user": {
    "id": 1,
    "nombre": "Juan Carlos P√©rez Actualizado",
    "email": "juan.actualizado@ejemplo.com",
    "role": "admin"
  }
}





9. üóëÔ∏è DELETE /api/auth/admin/users/:id - Eliminar usuario
Descripci√≥n: Elimina un usuario (solo administradores)
URL: DELETE /api/auth/admin/users/1
Headers:


Plain Text








Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json


Body: Vac√≠o
Respuesta Exitosa (200):


JSON








{
  "message": "Usuario eliminado exitosamente"
}


Errores (400):


JSON








{
  "error": "No puedes eliminarte a ti mismo"
}





üö® C√ìDIGOS DE ERROR COMUNES
400 - Bad Request


JSON








{
  "error": "El usuario ya existe"
}


401 - Unauthorized


JSON








{
  "error": "Token de acceso requerido"
}


403 - Forbidden


JSON








{
  "error": "Se requiere rol de administrador"
}


404 - Not Found


JSON








{
  "error": "Usuario no encontrado"
}


500 - Server Error


JSON








{
  "error": "Error del servidor"
}





üéØ FLUJO RECOMENDADO EN POSTMAN
1. Configurar variables de entorno en Postman


JavaScript








// Variables de colecci√≥n:
{
  "baseUrl": "http://localhost:3000/api/auth",
  "token": "{{jwt_token}}"
}


2. Script para auto-guardar token (en el test del login):


JavaScript








if (pm.response.code === 200) {
    const response = pm.response.json();
    pm.collectionVariables.set("token", response.token);
    console.log("Token guardado:", response.token);
}


3. Secuencia de pruebas recomendada:
POST {{baseUrl}}/register
POST {{baseUrl}}/login
GET {{baseUrl}}/profileAuthorization: Bearer {{token}}
POST {{baseUrl}}/admin/usersAuthorization: Bearer {{admin_token}}
GET {{baseUrl}}/admin/usersAuthorization: Bearer {{admin_token}}




üìã REGLAS DE VALIDACI√ìN
Registro/Actualizaci√≥n de usuarios:
nombre: Requerido, m√≠nimo 2 caracteres
email: Requerido, formato email v√°lido
password: Requerido, m√≠nimo 6 caracteres
confirmPassword: Debe coincidir con password
role: Opcional, debe ser 'admin' o 'user'

Login:
email: Requerido, formato email v√°lido
password: Requerido




üîê ROLES Y PERMISOS
Usuario normal (role: 'user')
‚úÖ Ver/editar su propio perfil
‚ùå Acceder a rutas de administraci√≥n
‚ùå Crear/editar/eliminar otros usuarios

Administrador (role: 'admin')
‚úÖ Todas las funciones de usuario normal
‚úÖ Crear nuevos usuarios (cualquier rol)
‚úÖ Listar todos los usuarios
‚úÖ Ver/editar/eliminar cualquier usuario
‚ùå Eliminarse a s√≠ mismo




üí° CONSEJOS PARA POSTMAN
1. Crear una colecci√≥n "Boya API - Auth"
2. Agregar carpetas:
Public Routes (register, login)
Protected Routes (profile)
3. Usar variables de entorno para el token4. Agregar tests para verificar respuestas

Ejemplo de test para login:


JavaScript








pm.test("Login exitoso", function() {
    pm.response.to.have.status(200);
    pm.response.to.have.jsonBody('message', 'Login exitoso');
    pm.response.to.have.jsonBody('user');
    pm.response.to.have.jsonBody('token');
});




